# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Body(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, name: str=None, gender: str=None, language: str=None):  # noqa: E501
        """Body - a model defined in Swagger

        :param name: The name of this Body.  # noqa: E501
        :type name: str
        :param gender: The gender of this Body.  # noqa: E501
        :type gender: str
        :param language: The language of this Body.  # noqa: E501
        :type language: str
        """
        self.swagger_types = {
            'name': str,
            'gender': str,
            'language': str
        }

        self.attribute_map = {
            'name': 'name',
            'gender': 'gender',
            'language': 'language'
        }
        self._name = name
        self._gender = gender
        self._language = language

    @classmethod
    def from_dict(cls, dikt) -> 'Body':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The body of this Body.  # noqa: E501
        :rtype: Body
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this Body.


        :return: The name of this Body.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Body.


        :param name: The name of this Body.
        :type name: str
        """

        self._name = name

    @property
    def gender(self) -> str:
        """Gets the gender of this Body.


        :return: The gender of this Body.
        :rtype: str
        """
        return self._gender

    @gender.setter
    def gender(self, gender: str):
        """Sets the gender of this Body.


        :param gender: The gender of this Body.
        :type gender: str
        """
        allowed_values = ["male", "female", "unknown"]  # noqa: E501
        if gender not in allowed_values:
            raise ValueError(
                "Invalid value for `gender` ({0}), must be one of {1}"
                .format(gender, allowed_values)
            )

        self._gender = gender

    @property
    def language(self) -> str:
        """Gets the language of this Body.


        :return: The language of this Body.
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language: str):
        """Sets the language of this Body.


        :param language: The language of this Body.
        :type language: str
        """
        allowed_values = ["Chinese", "English"]  # noqa: E501
        if language not in allowed_values:
            raise ValueError(
                "Invalid value for `language` ({0}), must be one of {1}"
                .format(language, allowed_values)
            )

        self._language = language
